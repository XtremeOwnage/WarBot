@using Discord
@using Discord.WebSocket
@using Microsoft.AspNetCore.Authentication
@using System.Net.Http.Headers
@using WarBot.Core
@using WarBot.DataAccess
@using WarBot.UI.Models.Discord

<div class="input-group">
    @if (!Roles.Any())
    {
        <select disabled class="form-control">
            <option value="" selected=@(!(SelectedRoleID.HasValue))>Please Wait</option>
        </select>
        <button disabled class="btn btn-primary">Refresh</button>
    }
    else
    {
        <select class="form-control custom-select" @onchange="setRole">
            <option value="" selected=@(!(SelectedRoleID.HasValue))>--Not Set--</option>
            @foreach (var item in Roles)
            {
                <option selected=@(SelectedRoleID == item.Id) value="@item.Id">@item.Name</option>
                // Blazor needs to know what values it binds to!
            }
        </select>
        <button class="btn btn-primary" @onclick="refresh">Refresh</button>
    }
</div>

@code {
    [CascadingParameter]
    public Models.Discord.UserGuild? SelectedGuild { get; set; }

    [Inject]
    public IDiscordClient discordClient { get; set; }

    [Inject]
    ILogger<RolePicker> log { get; set; }

    [Parameter]
    public Action<IRole?> OnRoleSelected { get; set; }

    [Parameter]
    public ulong? SelectedRoleID { get; set; }

    public IRole? GetSelectedRole() => Roles.FirstOrDefault(o => o.Id == SelectedRoleID);

    public List<IRole> Roles { get; set; } = new List<IRole>();

    private void setRole(ChangeEventArgs changeArgs)
    {
        if (ulong.TryParse(changeArgs.Value.ToString(), out ulong u))
        {
            var tch = Roles.FirstOrDefault(o => o.Id == u);
            this.SelectedRoleID = tch.Id;
            OnRoleSelected?.Invoke(tch);
            this.StateHasChanged();
        }
        else
        {
            this.SelectedRoleID = null;
            OnRoleSelected?.Invoke(null);
            this.StateHasChanged();
        }

    }
    private async Task refresh()
    {
        var guild = await discordClient.GetGuildAsync(SelectedGuild.ID_NUM.Value);
        this.Roles = guild.Roles.ToList();
        this.StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await refresh();
        }
    }

}